反汇编
	JAVAP -C

String底层是char[]

jps 查看当前正在运行的java程序

jinfo 查看项目中的jvm参数
jinfo -flags pid(由jps获得)

jstat 查看堆内存情况  和  GC发生的次数

jstack 查看线程死锁   分析死锁情况
	prio 当前线程的优先级
	os_prio 系统线程的优先级
	tid 线程的内存地址
	nid cup中的线程id
	
jmap 导出hprof文件(jvm内存快照)
	在jvm参数中添加  
	
GC日志
	YGC(YUNG GC轻回收)  快
	FGC(FULL GC)  慢



元空间GC水平线  默认21M  水平线会根据每次FullGc的元空间大小进行动态调节
Metadata-space  

JVM主要由三个子系统构成
	类加载子系统
	运行时数据区(内存结构)
	执行引擎
	
	运行时数据区 (线程私有)
		虚拟机栈
		本地方法栈(java底层运行顺序)
		程序计数器
		
		方法区
		
		堆
		
		新生代 老年代 
	 
类加载机制(生命周期)
	1.加载 
		将.class文件从磁盘读取到内存  根据全限定名(包名+类名)
			启动类加载器(Bootstrap ClassLoader)
				加载jre的核心类库  例如jre下的rt.jar chartset.jar
			扩展类加载器(Extension(扩展 延期) ClassLoader)
				负责加载jre扩展目录ext中jar类包
			系统类加载器(Application ClassLoader)
				负责加载ClassPath下的类包
			用户自定义加载器(User ClassLoader)
				负责加载用户自定义路径下的jar
			
		类加载机制
			全盘负责委托机制
				除非显示指定ClassLoad 否则由调用者决定使用哪个ClassLoad
			双亲委派机制
				加载Demo.class
					Application ClassLoad  委派给 Extension ClassLoad 再委派给 Bootstrap ClassLoader  由最顶层的判断加载路径  逐一返回至相应的加载器
				原因
					1.沙箱安全机制   避免用户写的类（例如写一个java.lang.String）捣乱  防止核心类库被篡改
					2.防止类重复加载
				怎么去打破双亲委派机制
				
GC回收
	引用计数法  
		给对象添加一个引用计数器 当有一个地方被引用时  计数器加1   缺点 ：循环引用会导致对象无法被回收
	可达性分析算法
		GcRoot根节点，线程，类加载器。static成员为根节点  这些节点向下搜索  节点走过的地方称为引用链
		当一个对象到GC Root没有任何引用链相连时  表示此对象不可达
		四种引用：强弱软虚
	如何回收一个常量：
		例如常量池中有一个字符串abc 那么此时没有一个String指向这个常量 则判断此常量是可回收状态
	finalize方法
		怎么让一个对象不被销毁   只能执行一次
		在对象销毁时被调用
			
			
	2.验证
		验证文件字节码的正确性
	3.准备
		给类的静态变量分配内存 赋予默认值 int 0
	4.解析
		类装载器装入类所引用的其他类
	5.初始化
		为类的静态变量赋予正确的初始值
	6.使用
	
	7.卸载